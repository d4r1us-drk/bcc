#!/usr/bin/env bash
# Bash Currency Converter (bcc), forked from "https://github.com/Besnn/moco-cli.git" by Clay Gomera (Drake).
# syntax: bcc <amount> <from> <to>

# All suported currencies, this is used for the help and list function
info="afn - Afghan Afghani\nall - Albanian Lek\ndzd - Algerian Dinar\naoa - Angolan Kwanza\nars - Argentine Peso\namd - Armenian Dram\nawg - Aruban Florin\naud - Australian Dollar\nazn - Azerbaijani Manat\nbsd - Bahamian Dollar\nbhd - Bahraini Dinar\nbdt - Bangladeshi Taka\nbbd - Barbadian Dollar\nbyn - Belarusian Ruble\nbzd - Belize Dollar\nbmd - Bermudan Dollar\nbtn - Bhutanese Ngultrum\nbtc - Bitcoin\nbob - Bolivian Boliviano\nbam - Bosnia And Herzegovina Konvertibilna Marka\nbwp - Botswana Pula\nbrl - Brazilian Real\ngbp - British Pound\nbnd - Brunei Dollar\nbgn - Bulgarian Lev\nbif - Burundi Franc\nkhr - Cambodian Riel\ncad - Canadian Dollar\ncve - Cape Verdean Escudo\nkyd - Cayman Islands Dollar\nxaf - Central African CFA Franc\nxpf - CFP Franc\nclp - Chilean Peso\nclf - Chilean Unit Of Account\ncny - Chinese Yuan\ncop - Colombian Peso\nkmf - Comorian Franc\ncdf - Congolese Franc\ncrc - Costa Rican Colon\nhrk - Croatian Kuna\ncuc - Cuban Convertible Peso\ncup - Cuban Peso\nczk - Czech Koruna\ndkk - Danish Krone\ndjf - Djiboutian Franc\ndop - Dominican Peso\nxcd - East Caribbean Dollar\negp - Egyptian Pound\nern - Eritrean Nakfa\netb - Ethiopian Birr\neur - Euro\nfkp - Falkland Islands Pound\nfjd - Fijian Dollar\ngmd - Gambian Dalasi\ngel - Georgian Lari\nghs - Ghanaian Cedi\ngip - Gibraltar Pound\ngtq - Guatemalan Quetzal\nggp - Guernsey Pound\ngnf - Guinean Franc\ngyd - Guyanese Dollar\nhtg - Haitian Gourde\nhnl - Honduran Lempira\nhkd - Hong Kong Dollar\nhuf - Hungarian Forint\nisk - Icelandic Kr\u00f3na\ninr - Indian Rupee\nidr - Indonesian Rupiah\nirr - Iranian Rial\niqd - Iraqi Dinar\nils - Israeli New Sheqel\njmd - Jamaican Dollar\njpy - Japanese Yen\njep - Jersey Pound\njod - Jordanian Dinar\nkzt - Kazakhstani Tenge\nkes - Kenyan Shilling\nkwd - Kuwaiti Dinar\nkgs - Kyrgyzstani Som\nlak - Lao Kip\nlvl - Latvian Lats\nlbp - Lebanese Lira\nlsl - Lesotho Loti\nlrd - Liberian Dollar\nlyd - Libyan Dinar\nmop - Macanese Pataca\nmkd - Macedonian Denar\nmga - Malagasy Ariary\nmwk - Malawian Kwacha\nmyr - Malaysian Ringgit\nmvr - Maldivian Rufiyaa\nimp - Manx pound\nmro - Mauritanian Ouguiya\nmur - Mauritian Rupee\nmxn - Mexican Peso\nmdl - Moldovan Leu\nmnt - Mongolian Tugrik\nmad - Moroccan Dirham\nmzn - Mozambican Metical\nmmk - Myanma Kyat\nnad - Namibian Dollar\nnpr - Nepalese Rupee\nang - Netherlands Antillean Gulden\nbyn - New Belarusian Ruble\ntwd - New Taiwan Dollar\nnzd - New Zealand Dollar\nnio - Nicaraguan Cordoba\nngn - Nigerian Naira\nkpw - North Korean Won\nnok - Norwegian Krone\nzmk - Old Zambian Kwacha\nomr - Omani Rial\ntop - Paanga\npkr - Pakistani Rupee\npab - Panamanian Balboa\npgk - Papua New Guinean Kina\npyg - Paraguayan Guarani\npen - Peruvian Nuevo Sol\nphp - Philippine Peso\npln - Polish Zloty\nqar - Qatari Riyal\nron - Romanian Leu\nrub - Russian Ruble\nrwf - Rwandan Franc\nshp - Saint Helena Pound\nsvc - Salvadoran Col\u00f3n\nwst - Samoan Tala\nstd - Sao Tome And Principe Dobra\nsar - Saudi Riyal\nrsd - Serbian Dinar\nscr - Seychellois Rupee\nsll - Sierra Leonean Leone\nxag - Silver (troy ounce)\nsgd - Singapore Dollar\nsbd - Solomon Islands Dollar\nsos - Somali Shilling\nzar - South African Rand\nkrw - South Korean Won\nxdr - Special Drawing Rights\nlkr - Sri Lankan Rupee\nsdg - Sudanese Pound\nsrd - Surinamese Dollar\nszl - Swazi Lilangeni\nsek - Swedish Krona\nchf - Swiss Franc\nsyp - Syrian Pound\ntjs - Tajikistani Somoni\ntzs - Tanzanian Shilling\nthb - Thai Baht\nttd - Trinidad and Tobago Dollar\ntnd - Tunisian Dinar\ntry - Turkish New Lira\ntmt - Turkmenistan Manat\naed - UAE Dirham\nugx - Ugandan Shilling\nuah - Ukrainian Hryvnia\nusd - United States Dollar\nuyu - Uruguayan Peso\nuzs - Uzbekistani Som\nvuv - Vanuatu Vatu\nvef - Venezuelan Bolivar\nvnd - Vietnamese Dong\nxof - West African CFA Franc\nyer - Yemeni Rial\nzmw - Zambian Kwacha\nzwl - Zimbabwean Dollar\n"

# colors variables for the echo command
GREEN='\033[1;32m'
RED='\033[1;31m'
YELLOW='\033[1;33m'
UNDERLINE='\033[4m'
RESET_COLOR='\033[0m'

# some variables and declares
declare -r API_KEY='e29d7cafb2376f82e1bb' # needed for api validation
declare amount
declare from_currency
declare -a to_currencies
declare -a currencies=(aed afn all amd ang aoa ars aud awg azn bam bbd bdt bgn bhd bif
bmd bnd bob brl bsd btc btn bwp byn byr bzd cad cdf chf clf clp cny cop crc cuc
cup cve czk djf dkk dop dzd egp ern etb eur fjd fkp gbp gel ggp ghs gip gmd gnf
gtq gyd hkd hnl hrk htg huf idr ils imp inr iqd irr isk jep jmd jod jpy kes kgs
khr kmf kpw krw kwd kyd kzt lak lbp lkr lrd lsl lvl lyd mad mdl mga mkd mmk mnt
mop mro mur mvr mwk mxn myr mzn nad ngn nio nok npr nzd omr pab pen pgk php pkr
pln pyg qar ron rsd rub rwf sar sbd scr sdg sek sgd shp sll sos srd std svc syp
szl thb tjs tmt tnd top try ttd twd tzs uah ugx usd uyu uzs vef vnd vuv wst xaf
xag xcd xdr xof xpf yer zar zmk zmw zwl) # 166 currencies


# help and find funcion
case $1 in
"help"|"h"|"-h"|"--help"|"list"|"l"|"-l"|"--list")
if [ "$info" ]; then
echo -e $RED"syntax: bcc <amount> <from> <to>\nPlease, try one of the valid arguments below\n"$RESET_COLOR
echo -e "$info"
fi
exit 1;;
"give"|"find")
if [[ $2 ]]; then
echo -e "$info" | grep -iE "$2" || (echo -e $RED"Couldn't find currency. Sorry.\n"$RESET_COLOR 1>&2 && exit 1)
echo
exit 0
fi
echo -e $RED"Try: bcc find <currency>"$RESET_COLOR 1>&2
echo
exit 1
esac

# amount error
if ! [[ $1 =~ ^[[:digit:]].?+$ ]]; then
	echo -e $RED"The [amount] is not valid" 1>&2
	echo -e "Has to be decimal" 1>&2
	echo -e "\n"$RESET_COLOR
	exit 1
fi

# check if parameters are inputted
if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then
    echo -e $RED"Usage: bcc [amount] [from-currency] {to-currency}"$RESET_COLOR 1>&2
    echo -e "\n" 1>&2
	exit 1
fi

# main variables
amount=$1
from_currency=$2
shift; shift
to_currencies=($@)

# check if arguments are valid

found_from=false
declare -i count=0

for i in ${currencies[@]}
do
	if [ "$from_currency" = "$i" ]; then
		found_from=true
	fi
done

if [ "$found_from" = false ]; then
	echo -e $RED"[FROM_CURRENCY] not valid" 1>&2
	echo -e "type <bcc --help> for valid currencies" 1>&2
	echo -e "\n"$RESET_COLOR
	exit 1
fi

for i in ${to_currencies[@]}
do
	for j in ${currencies[@]}
	do
		to_found=false
		if [ "$i" = "$j" ]; then
		to_found=true; break
		fi
	done
	if [ $to_found = false ]; then
		echo -e $RED"[TO_CURRENCY] not valid" 1>&2
		echo -e "type <bcc --help> for valid currencies" 1>&2
		echo -e "\n"$RESET_COLOR
		exit 1
	fi
done

from_currency=$( echo $from_currency | tr '[:lower:]' '[:upper:]' )

declare -i position=0
for curr in ${to_currencies[@]}
do
	curr=$( echo $curr | tr '[:lower:]' '[:upper:]' )
	IDs[$position]="$from_currency""_""$curr"
	position+=1
	IDs[$position]=","
	position+=1
done
unset IDs[$(expr $position - 1)]

declare -i length=${#to_currencies[@]}
declare -a rates
declare request

for i in ${IDs[@]}
do
	request=$request"$i"
done

get=$(curl --silent https://free.currconv.com/api/v7/convert\?q\=${request}\&compact\=ultra\&apiKey\=${API_KEY})

rates=($(echo $get | grep -Eo '*[0-9.]*[0-9]'))

for ((i=0; i < length; i++))
do
		echo -en "$GREEN$from_currency" "to" "$(echo -en ${to_currencies[$i]} | tr '[:lower:]' '[:upper:]')"
		echo -en ": "$UNDERLINE
 		LC_NUMERIC="en_US.UTF-8" printf "%0.3f\n" $(echo "${rates[$i]} * $amount" | bc -l)
		echo -en $RESET_COLOR
done

echo -en '\n'
exit 0
